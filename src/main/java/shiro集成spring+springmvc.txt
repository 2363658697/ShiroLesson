shiro集成spring+springmvc: 
	1.spring+springmvc的所有配置和依赖全部导入
	
	2.shiro的依赖：
			<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-core</artifactId>
			<version>1.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-web</artifactId>
			<version>1.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-spring</artifactId>
			<version>1.4.0</version>
		</dependency>
		
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.2</version>
		</dependency>
		
	3.shiro在web.xml的配置：
		<filter>
	    <filter-name>shiroFilter</filter-name>
	    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	    <init-param>
	        <param-name>targetFilterLifecycle</param-name>
	        <param-value>true</param-value>
	    </init-param>
	</filter>
	<filter-mapping>
	    <filter-name>shiroFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>
	
	4.shiro在spring.xml中的配置：
	
  <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	 <property name="realm" ref="myDbRealm"/>
	 <property name="authenticator" ref="authentictor"></property>
  </bean>
  
  <bean id="f" class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"></bean>
  
  <bean id="authentictor" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
    <property name="authenticationStrategy" ref="f"></property>
 	<!--这里使用的是自定义的realm -->
    <property name="realms" ref="myRealm"></property>
  </bean>
  
  
   <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
   
   <!-- spring配置ini -->
   <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <property name="securityManager" ref="securityManager"/>
	    <property name="loginUrl" value="/login.html"/>
	    <property name="unauthorizedUrl" value="/fail.jsp"/> 
	    <property name="filters">
	       <map>
		    <!-- 这里的可以只能是默认的过滤器中定义好的枚举类型：anon,role,persms,authc等 -->
	       	<entry key="authc" value-ref="myFilter"></entry>
	       </map>
	    </property>
	    <property name="filterChainDefinitions">
	        <value>
	           /** = authc
	        </value>
	    </property>
	</bean>

	
	5.自定义实现realm:新建一个类extends AuthorizingRealm重写该类中的两个方法：认证和授权
@Component
public class MyRealm extends AuthorizingRealm{
	
	@Autowired
	UserMapper userMapper;

	/**
	 * 认证 将登陆输入的用户名和密码和数据库中的用户名和密码对比 是否相等 返回值 null表示认证失败 非null认证通过
	 */
	@Override
	protected AuthenticationInfo doGetAuthenticationInfo(
			AuthenticationToken arg0) throws AuthenticationException {
		
		UsernamePasswordToken uToken=(UsernamePasswordToken) arg0;
		//获取用户名
		String userName=uToken.getPrincipal().toString();
		//根据用户名来获取该用户的所有信息
		UserInfo user = userMapper.queryUser(userName);
		 
		if(user !=null && user.getPassword().equals(new String(uToken.getPassword()))){
			System.out.println("认证成功");
			
			//该类是AuthenticationInfo的一个子实现类
			SimpleAccount simpleAccount=new SimpleAccount(uToken.getPrincipal(),uToken.getCredentials(),"MyRealm");
			
			return simpleAccount;
		}
		return null;
	}

	/**
	 * 获取当前用户的授权数据 将当前用户在数据库的角色和权限 加载到AuthorizationInfo
	 */
	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection arg0) {
		System.out.println("获取授权信息");
		
		//获取用户名
		String userName = arg0.getPrimaryPrincipal().toString();
		//根据用户名获取该用户的角色信息
		Set<String> roles = userMapper.querRoleByName(userName);
		//根据用户名获取该用户的权限信息
		Set<String> perms = userMapper.queryPermsByName(userName);
		//该类是AuthenticationInfo的一个子实现类
		SimpleAuthorizationInfo authorizationInfo = new SimpleAuthorizationInfo();
		
		authorizationInfo.setRoles(roles);
		authorizationInfo.setStringPermissions(perms);
		
		return authorizationInfo;
	}
}

6.自定义过滤器myFilter

@Component
public class MyFilter extends AuthorizationFilter {  
      
    @Autowired  
    private ShiroFilterFactoryBean sffb;  
    /**  
     * 匹配指定过滤器规则的url  
     * @param regex  
     * @param url  
     * @return  
     */  
    public static boolean matchUrl(String regex,String url){  
    	
        regex=regex.replaceAll("/+", "/");  
        if(regex.equals(url)){  
            return true;  
        }  
        regex=regex.replaceAll("\\.", "\\\\.");  
        // /login.html  /l*.html  
        regex=regex.replaceAll("\\*", ".*");  
        // /**/login.html  /a/b/login.html  
        if(regex.indexOf("/.*.*/")>=0){  
            regex=regex.replaceAll("/\\.\\*\\.\\*/", "((/.*/)+|/)");  
        }  
        System.out.println(regex+"----"+url);  
        return Pattern.matches(regex, url);  
    } 
 
    @Autowired
    UserMapper userMapper;
     
    /**  
     * isAccessAllowed用于判断当前url的请求是否能验证通过  如果验证失败 调用父类的onAccessDenied决定跳转到登录失败页还是授权失败页面  
     */  
    @Override  
    public boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue)  
            throws Exception {  
    	
        HttpServletRequest req=(HttpServletRequest)request; 
        String contextPath=req.getContextPath();
        //获取用户访问的资源的路径
        String url=req.getRequestURI();  
        url=url.split(contextPath)[1];
        //获取哪些url需要哪些认证
        //List<Menu> queryMenu = userMapper.queryMenuByUrl(url);
        //获取菜单表中所有的信息
        List<Menu> queryMenu =userMapper.queryMenu();
      //数据库没有配置当前url的授权
        if(queryMenu.size()==0){
        	return false;
        }
        String urlAuth=null;
        for(Menu menu:queryMenu){
        	if(matchUrl(menu.getMenuUrl(),url)){
        		urlAuth=menu.getMenuFilter();
        	}
        }
        if(urlAuth==null){  
            return false;  
        }  
        //配置的过滤器是anon 直接放过  
        if(urlAuth.startsWith("anon")){  
            return true;  
        }  
        //配置的是authc 判断当前用户是否认证通过  
        Subject subject = getSubject(request, response);  
        if(urlAuth.startsWith("authc")){  
            return subject.isAuthenticated();  
        }  
        //授权认证 也需要判断是否登录 没有登录返回 登录继续下面的验证  
        boolean ifAuthc=subject.isAuthenticated();  
        if(!ifAuthc)  
            return ifAuthc;  
        //如果是定义的roles过滤器  获取所有的roles 一般是roles[a,b]  
        if(urlAuth.startsWith("roles")){  
            String[] rolesArray=urlAuth.split("roles\\[")[1].split("\\]")[0].split(",");  
            if (rolesArray == null || rolesArray.length == 0) {  
                return true;  
            }  
            Set<String> roles = CollectionUtils.asSet(rolesArray);  
            return subject.hasAllRoles(roles);  
        }  
        if(urlAuth.startsWith("perms")){  
            String[] perms=urlAuth.split("perms\\[")[1].split("\\]")[0].split(",");  
            boolean isPermitted = true;  
            if (perms != null && perms.length > 0) {  
                if (perms.length == 1) {  
                    if (!subject.isPermitted(perms[0])) {  
                        isPermitted = false;  
                    }  
                } else {  
                    if (!subject.isPermittedAll(perms)) {  
                        isPermitted = false;  
                    }  
                }  
            }  
  
            return isPermitted;  
        }  
        return false;  
    }  
  
}  
